<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd
   	   http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- Hibernate5 -->
	<!-- 加载资源文件 其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载 -->
<!-- 	<bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/conf/hibernate-mysql.properties" />
        <property name="ignoreUnresolvablePlaceholders" value="true" />
    </bean> -->
	<context:property-placeholder
		location="classpath:/conf/hibernate-mysql.properties"/>

<!-- 	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"> 
		<property name="configLocation" value="classpath:hibernate.cfg.xml"> </property> 
	</bean> 
	定义数据源，该bean的 ID 为 dataSource
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">指定数据库驱动
		<property name="driverClassName">
			<value>com.mysql.jdbc.Driver</value>
		</property>
	    指定连接数据库的URL
		<property name="url">
			<value>jdbc:mysql://localhost:3306/studyplugin</value>
		</property>
		root 为数据库的用户名 
		<property name="username">
			<value>root</value>
		</property>
		pass 为数据库密码
		<property name="password">
			<value>pass</value>
		</property>
	</bean> 
	定义Hibernate的 SessionFactory
	<bean id = "sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		依赖注入数据源，注入正是上文定义的dataSource
		<property name="dataSource" ref ="dataSource"/> 
		mappingResouces属性用来列出全部映射文 
		<property name="mappingResources">
			<list> 
				以下用来列出所有的PO 映射文件
				<value>lee/MyTest.hbm.xml</value>
			</list>
		</property>
		定义Hibernate的 SessionFactory的属性
		<property name="hibernateProperties">
			<props> 
				指定Hibernate的连接方法 
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop> 
				不同数据库连接，启动时选择create，update， create-drop
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="packagesToScan"> 
		<list> 可以加多个包 <value>com.springdemo.dao</value> </list> </property> <property 
		name="hibernateProperties"> <props> <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> 
		<prop key="hibernate.dialect">${hibernate.dialect}</prop> <prop key="hibernate.show_sql">${hibernate.show_sql}</prop> 
		<prop key="hibernate.current_session_context_class">thread</prop> </props> 
		</property> </bean> 数据库映射 class="org.apache.tomcat.dbcp.dbcp.BasicDataSource" 
		class="org.springframework.jdbc.datasource.DriverManagerDataSource" <bean 
		id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="${jdbc.driverClassName}" /> <property 
		name="url" value="${jdbc.url}" /> <property name="username" value="${jdbc.user}" 
		/> <property name="password" value="${jdbc.pass}" /> </bean> -->


	<!-- 配置数据源 c3p0 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.pass}" />

		<!-- 请求超时时间 -->
		<property name="checkoutTimeout" value="30000" />
		<!-- 每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
		<property name="idleConnectionTestPeriod" value="30" />
		<!-- 连接数据库连接池最大空闲时间 -->
		<property name="maxIdleTime" value="30" />
		<!-- 连接池初始化连接数 -->
		<property name="initialPoolSize" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="maxPoolSize" value="20" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
		<property name="acquireIncrement" value="5" />
	</bean>

	<!-- 配置hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 注入数据源 相关信息看源码 -->
		<property name="dataSource" ref="dataSource" />
		<!-- hibernate配置信息 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>

				<!-- 开启二级缓存 ehcache <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop> 
					<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop> 
					<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop> 
					<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path} 
					</prop> -->
			</props>
		</property>
		<!-- 扫描hibernate注解配置的entity -->
		<property name="packagesToScan" value="com.springdemo.dao" />
	</bean>

	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- 配置Hibernate事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务增强处理Bean，指定事务管理器 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<!-- 配置详细事务处理语义 -->
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="true" />

			<!-- 其他采用默认事务方式 -->
			<tx:method name="*" />

		</tx:attributes>
	</tx:advice>

	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager <tx:advice 
		id="txAdvice" transaction-manager="transactionManager"> <tx:attributes> <tx:method 
		name="add*" propagation="REQUIRED" /> <tx:method name="get*" propagation="REQUIRED" 
		/> <tx:method name="*" read-only="true" /> </tx:attributes> </tx:advice> -->

	<!--<aop:config expose-proxy="true"> -->
	<!--&lt;!&ndash; 只对业务逻辑层实施事务 &ndash;&gt; -->
	<!--<aop:pointcut id="txPointcut" expression="execution(* com.lei.demo.service..*.*(..))" 
		/> -->
	<!--&lt;!&ndash; Advisor定义，切入点和通知分别为txPointcut、txAdvice &ndash;&gt; -->
	<!--<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/> -->
	<!--</aop:config> -->

	<bean id="appPackageManager" class="com.springdemo.daomanager.AppPackageManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

</beans>